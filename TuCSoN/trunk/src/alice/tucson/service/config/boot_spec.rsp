reaction(out(boot),true,(
    in(boot),
    no(boot_info(_)),
    current_time(Time),
    out(boot_info([time(Time)])),
    out(rbac_installed(no)),
    out(context_id(0)),
    %out(authorized_agent(_)),
    out(authorized_inspectors(yes)),
    out(policy(admin_policy,[])),
    out(role_policy(admin_role,admin_policy)),
    out(policy(defaultPolicy, []))
    %out(role_assignment(_,_))
)).

reaction(inp(install_rbac),request,
(
	in(rbac_installed(R)),
	out(rbac_installed(yes)),
	out(install_rbac)
)).

reaction(inp(disinstall_rbac),request,
(
	in(rbac_installed(R)),
	in_all(role(Name,Description,Level), RoleList),
	in_all(policy(Name,Permissions), PolicyList),
	in_all(role_policy(NameRuolo,NamePolicy), RolePolicyList),
	in_all(authorized_agent(NameAgent), AgentList),
	out(rbac_installed(no)),
	out(disinstall_rbac)
)).

%
% context acquire. na = not activated
%
%reaction( inp(context_request(AgentId,_)),request,(
%  no(authorized_agent(AgentId)),
%  out(context_request(AgentId,failed(agent_not_authorised))))).

%reaction( inp(context_request(AgentId,_)),request(
%  rd(open_session(_,AgentId)),
%  no(context_request(AgentId,ok(_))),
%  out(context_request(AgentId,failed(agent_already_present))) )).

%reaction( inp(context_request(AgentId,_)),request,(
%  rd(authorized_agent(AgentId)),
%  in(context_id(Id)),
%  Id1 is Id + 1,
%  out(context_id(Id1)),
%  no(open_session(_,AgentId,_)),
%  out(open_session(Id,AgentId,[])),
%  out(context_request(AgentId,ok(Id))) )).

%Probabilmente da togliere! Non può avere classe agente differente da quella base se non ha fatto login con successo!
%reaction( inp(context_request(AgentId,_,AgentClass,AccUUID)),request,(
%  no(authorized_agent(AgentId)),
%  out(context_request(AgentId,failed(agent_not_authorized), AgentClass,AccUUID)))).
  
reaction( inp(context_request(AgentId,_,AgentClass,AccUUID)),request,(
  rd(open_session(Id,AgentId,AccUUID,_,_)),
  no(context_request(AgentId,ok(_),AccUUID)),
  out(context_request(AgentId,ok(Id),AgentClass,AccUUID)))).

% Agente non base, quindi ha effettuato il login
reaction( inp(context_request(AgentId,_,AgentClass,AccUUID)),request,(
  no(base_agent_class(AgentClass)),
  in(context_id(Id)),
  Id1 is Id + 1,
  out(context_id(Id1)),
  no(open_session(_,AgentId,AccUUID,_,_)),
  out(open_session(Id,AgentId,AccUUID,AgentClass,na)),
  out(context_request(AgentId,ok(Id),AgentClass,AccUUID)) )).

% Richiesta di contesto per la classe base, quindi da utente che non ha effettuato login e login non richiesto
reaction( inp(context_request(AgentId,_,AgentClass,AccUUID)),request,(
  rd(base_agent_class(AgentClass)),
  no(login_required(yes)),
  in(context_id(Id)),
  Id1 is Id + 1,
  out(context_id(Id1)),
  no(open_session(_,AgentId,AccUUID,_,_)),
  out(open_session(Id,AgentId,AccUUID,AgentClass,na)),
  out(context_request(AgentId,ok(Id),AgentClass,AccUUID)) )).
  
% Richiesta di contesto per la classe base, quindi da utente che non ha effettuato login e login richiesto
reaction( inp(context_request(AgentId,_,AgentClass,AccUUID)),request,(
  rd(base_agent_class(AgentClass)),
  rd(login_required(yes)),
  out(context_request(AgentId,failed(login_required),AgentClass,AccUUID)) )).

%
% context release
%
reaction( inp(context_shutdown(CtxId,AgentId,_)),request,(
  rd(open_session(CtxId,AgentId,_,_,_)),
  out(context_shutdown(CtxId,AgentId,ok)) )).

reaction( inp(context_shutdown(CtxId,AgentId,ok)),response,(
  in(open_session(CtxId,AgentId,_,_,_)) )).

reaction( inp(context_shutdown(CtxId,AgentId,_)),request,(
  no(open_session(CtxId,AgentId,_,_,_)),
  out(context_shutdown(CtxId,AgentId,failed(no_valid_context))) )).

%
% role creation/destruction
%
reaction( out(role(Name,Desc, substitute)), completion,(
	in(role(Name,Desc, substitute)),
	rd(base_agent_class(Class)),
	out(role(Name,Desc,Class))	
)).

reaction( inp(remove_role(RoleId)), request, (
	in(role(RoleId,_,_)),
	in(role_policy(RoleId,_)),
	out(remove_role(RoleId))
)).

%
% role activation
%
% Attivazione ruolo con successo. Si legge classe agente della sessione agente-acc e del ruolo che si vuole attivare
% Se combaciano allora l'agente-acc è autorizzato e viene ritornata la policy e i permessi concessi
reaction( inp(role_activation_request(AgentId,AccUUID,RoleId,_)),request,(
  in(open_session(CtxId,AgentId,AccUUID,SessionRoleClass,_)),				% C'è una sessione aperta per agente-acc
  rd(role(RoleId,Descr,SessionRoleClass)),									% Esiste il ruolo e la classe agente è corretta
  out(open_session(CtxId,AgentId,AccUUID,SessionRoleClass,RoleId)),
  rd(role_policy(RoleId,PolicyId)),
  rd(policy(PolicyId,PermissionList)),
  out( role_activation_request(AgentId,AccUUID,RoleId,ok(PolicyId, PermissionList))))).
  
% Failed because requested role can't be found
reaction( inp(role_activation_request(AgentId,AccUUID,RoleId,_)), request, (
	no(role(RoleId,Descr,_)),
	out(open_session(CtxId,AgentId,AccUUID,SessionRoleClass,_)),
	out(role_activation_request(AgentId,AccUUID,RoleId,failed(role_not_found)))
)).

% Agent class doesn't match role agent class, but is a base role 
reaction( inp(role_activation_request(AgentId,AccUUID,RoleId,_)), request, (
	in(open_session(CtxId,AgentId,AccUUID,SessionRoleClass,_)),
	no(role(RoleId,_,SessionRoleClass)),
	rd(base_agent_class(BaseAgentClass)),
	rd(role(RoleId,_,BaseAgentClass)),
	rd(role_policy(RoleId,PolicyId)),
  	rd(policy(PolicyId,PermissionList)),
	out(open_session(CtxId,AgentId,AccUUID,SessionRoleClass,RoleId)),
	out(role_activation_request(AgentId,AccUUID,RoleId,ok(PolicyId, PermissionList)))
)).

% Agent class doesn't match role agent class, not a base role
reaction( inp(role_activation_request(AgentId,AccUUID,RoleId,_)), request, (
	in(open_session(CtxId,AgentId,AccUUID,SessionRoleClass,_)),
	no(role(RoleId,_,SessionRoleClass)),
	out(open_session(CtxId,AgentId,AccUUID,SessionRoleClass,_)),
	out(role_activation_request(AgentId,AccUUID,RoleId,failed(agent_not_authorized_for_role)))
)).

%
% Policy list
%
reaction( inp(policy_list_request(AgentClass,_)), request, (
	rd_all(policy(PolicyId, PermissionList), AllPolicyList),
	out(create_policy_list(AgentClass,AllPolicyList,[]))
)).

% The role is activable for the agent, added to ResultList
reaction( out(create_policy_list(AgentClass,[policy(PolicyId,PermissionList)|AllPolicyList], ResultList)),internal,
(
	in(create_policy_list(AgentClass,_, ResultList)),	% tolgo la tupla scatenante la reazione
	rd(role_policy(RoleId,PolicyId)),
	rd(role(RoleId,_,AgentClass)),
	out(create_policy_list(AgentClass,AllPolicyList, [policy(PolicyId,PermissionList)|ResultList]))	
)).

% The role is not activable for the agent but is a base role, added to ResultList
reaction( out(create_policy_list(AgentClass,[policy(PolicyId,PermissionList)|AllPolicyList], ResultList)),internal,
(
	in(create_policy_list(AgentClass,_, ResultList)),	% tolgo la tupla scatenante la reazione
	rd(role_policy(RoleId,PolicyId)),
	no(role(RoleId,_,AgentClass)),
	rd(base_agent_class(BaseClass)),
	rd(role(RoleId,_,BaseClass)),
	out(create_policy_list(AgentClass,AllPolicyList, [policy(PolicyId,PermissionList)|ResultList]))	
)).

% The role is not activable for the agent, discarded
reaction( out(create_policy_list(AgentClass,[policy(PolicyId,PermissionList)|AllPolicyList], ResultList)),internal,
(
	in(create_policy_list(AgentClass,_, ResultList)),	% tolgo la tupla scatenante la reazione
	rd(role_policy(RoleId,PolicyId)),
	no(role(RoleId,_,AgentClass)),
	out(create_policy_list(AgentClass,AllPolicyList, ResultList))	
)).

% The policy is not assigned to any role
reaction( out(create_policy_list(AgentClass,[policy(PolicyId,PermissionList)|AllPolicyList], ResultList)),internal,
(
	in(create_policy_list(AgentClass,_, ResultList)),	% tolgo la tupla scatenante la reazione
	no(role_policy(RoleId,PolicyId)),
	out(create_policy_list(AgentClass,AllPolicyList, ResultList))	
)).

reaction( out(create_policy_list(AgentClass,[], ResultList)), internal,
(
	in(create_policy_list(AgentClass, OldPolicyList, NewPolicyList)),
	out(policy_list_request(AgentClass, ok(NewPolicyList)))
)).


		
reaction( inp(policy_role_request(PolicyId,_)), (invocation, operation), (
	rd(role_policy(RoleId, PolicyId)),
	out(policy_role_request(PolicyId,RoleId))
	)).
	
reaction( inp(role_policy_request(_,RoleId)), (invocation, operation), (
	rd(role_policy(RoleId, PolicyId)),
	out(role_policy_request(PolicyId,RoleId))
	)).
	
	
% Policy destruction
reaction( inp(remove_policy(PolicyId)), request, 
(
	in(policy(PolicyId, _)),
	in(role_policy(RoleId, PolicyId)),
	out(role_policy(RoleId, defaultPolicy)),
	out(remove_policy(PolicyId))
)).


%
% ========================================================================================
%			Change RBAC structure values
% ========================================================================================
%

% ======Set policy of role======
% Success
reaction( inp(set_role_policy(RoleId, PolicyId, Result)), request,
(
	rd(role(RoleId,_,_)),					% role exists
	rd(policy(PolicyId,_)),					% policy exists
	in(role_policy(RoleId,_)),				% remove old relation
	out(role_policy(RoleId,PolicyId)),		% set new relation
	out(set_role_policy(RoleId, PolicyId, ok))
)).

% Failure: role doesn't exists
reaction( inp(set_role_policy(RoleId, PolicyId, Result)), request,
(
	no(role(RoleId,_,_)),					% role does not exists
	out(set_role_policy(RoleId, PolicyId, failed(role_not_exists)))
)).

% Failure: policy doesn't exists
reaction( inp(set_role_policy(RoleId, PolicyId, Result)), request,
(
	rd(role(RoleId,_,_)),					% role exists
	no(policy(PolicyId,_)),					% policy does not exists
	out(set_role_policy(RoleId, PolicyId, failed(policy_not_exists)))
)).

% ======Add permission======
% Success
reaction( inp(add_permission(PermissionId, PolicyId, Result)), request,
(
	rd(policy(PolicyId,_)),										% policy exists
	no(policy(PolicyId,[PermissionId|RestPermissionList])),		% permission not already exists in policy
	in(policy(PolicyId, PermissionList)),	
	out(policy(PolicyId,[PermissionId|PermissionList])),
	out(add_permission(PermissionId, PolicyId, ok))
)).

% Failure: policy does not exists
reaction( inp(add_permission(PermissionId, PolicyId, Result)), request,
(
	no(policy(PolicyId,_)),										% policy does not exists
	out(add_permission(PermissionId, PolicyId, failed(policy_not_exists)))
)).

% ======Set role agent class======
% Success
reaction( inp(set_role_class(RoleId,AgentClass,Result)), request,
(
	rd(role(RoleId,_,_)),							% role exists
	in(role(RoleId,Desc,_)),							
	out(role(RoleId,Desc,AgentClass)),
	out(set_role_class(RooleId,AgentClass,ok))
)).


%
%	Inspectors authorized?
%
reaction( inp(are_inspectors_auth(_)), request,(
 	rd(authorized_inspectors(A)),
 	out(are_inspectors_auth(A))
)).
 
reaction( inp(authorize_inspectors(A)), request,(
 	in(authorized_inspectors(_)),
 	out(authorized_inspectors(A)),
 	out(authorize_inspectors(A))
)).

%
%	LOGIN
%

reaction( inp(set_login(A)), (invocation, operation),(
 	in(login_required(_)),
 	out(login_required(A)),
 	out(set_login(A))
)).

%
% Classe agente base
%

reaction( inp(get_default_agent_class(_)), (invocation,operation),(
	rd(default_agent_class(A)),
	out(get_default_agent_class(A))
)).

reaction( inp(set_base_agent_class(NewClassAgent)), request,(
 	in(base_agent_class(OldClassAgent)),
 	out(base_agent_class(NewClassAgent)),
 	in_all(role(_,_,OldClassAgent), RoleList),
	out(change_roles_class(NewClassAgent, RoleList)),
 	out(set_base_agent_class(NewClassAgent))
)).

reaction( out(change_roles_class(NewClassAgent,[role(RoleId,Desc,OldClassAgent)|RoleList])), internal,
(
	in(change_roles_class(NewClassAgent,_)),	% tolgo la tupla che ha scatenato la reazione
	out(role(RoleId,Desc,NewClassAgent)),
	out(change_roles_class(NewClassAgent, RoleList))
)).

reaction( out(change_roles_class(NewClassAgent,[])), internal,
(
	in(change_roles_class(NewClassAgent,_)) % tolgo la tupla che ha scatenato la reazione
)).

reaction( inp(get_base_agent_class(_)), invocation, (
	rd(base_agent_class(A)),
	out(get_base_agent_class(A))
)).

%
%	Richiesta di login
%

% Richiesta di login. Esistono le credenziali fornite e viene ritornata la classe agente assegnata
reaction( inp(login_request(Credentials,_)), request, (
	rd(authorized_agent(Credentials, AgentClass)),
	out(login_request(Credentials, ok(AgentClass))))
).

% Richiesta di login. Le credenziali non sono corrette, viene ritornata la classe agente di default
reaction( inp(login_request(Credentials,_)), request, (
	no(authorized_agent(Credentials, AgentClass)),
	rd(base_agent_class(Class)),
	out(login_request(Credentials, failed(Class))))
).

% Richiesta di login per admin con fallimento
reaction( inp(admin_login_request(Credentials,_)), request, (
	no(admin_credentials(Credentials)),
	out(admin_login_request(Credentials, failed(agent_not_authorized)))
)).

% Richiesta di login per admin con successo
reaction( inp(admin_login_request(Credentials,_)), request, (
	rd(admin_credentials(Credentials)),
	out(admin_login_request(Credentials, ok))
)).
 
%
%	List of all roles based on agent class, with policy and list of permissions
%	

% List of all roles not permitted
reaction( inp(role_list_request(AgentClass,_)), request,
(
	rd(list_all_roles(no)),
	out(role_list_request(AgentClass,failed(list_not_permitted)))
)).

reaction( inp(role_list_request(AgentClass,_)),request,
(
	rd(list_all_roles(yes)),
	rd_all(role(RoleId,Desc,AgentClass), AllRoleList),
	%out(role_list_request(ok(AllRoleList)))
	out(create_role_list(AllRoleList,[]))
)).
	
reaction( out(create_role_list([role(RoleId,Desc,AgentClass)|AllRoleList], ResultList)),internal,
(
		in(create_role_list(_, ResultList)), % tolgo la tupla scatenante la reazione
		rd(role_policy(RoleId,PolicyId)),
		rd(policy(PolicyId, PermissionList)),
		out(create_role_list(AllRoleList, [role(RoleId, Desc, PolicyId, PermissionList)|ResultList]))
)).

reaction( out(create_role_list([], ResultList)), internal,
(
	in(create_role_list(OldRoleList,NewRoleList)),
	out(role_list_request(AgentClass, ok(NewRoleList)))
)).
%
% command management
%

reaction(in(cmd(X)),response,(
  out(cmd_pending(X)))).

reaction(in(cmd_result(X,_)),request,(
  no(cmd_result(X,_)),
  no(cmd_pending(X)),
  out(cmd_result(X,unknown)))).

reaction(in(cmd_result(X,R)),request,(
  rd(cmd_pending(X)),
  out(cmd_result(X,pending)))).

reaction(out(cmd_result(X,R)),(
  no(cmd_pending(X)),
  in(cmd_result(X,R)))).

reaction(out(cmd_result(X,R)),(
  in(cmd_pending(X)) )).

%
% for persistency management
%
reaction(rdp(is_persistent(TC,R)),(
  no(is_persistent(TC)),
  out(is_persistent(TC,false)))).

reaction(rd(is_persistent(TC,R)),request,(
  no(is_persistent(TC)),
  out(is_persistent(TC,false)))).

reaction(inp(in_persistent(TC,R)),(
  no(is_persistent(TC)),
  out(is_persistent(TC,false)))).

reaction(in(is_persistent(TC,R)),request,(
  no(is_persistent(TC)),
  out(is_persistent(TC,false)))).

%

reaction(inp(is_persistent(TC,R)),request,(
  rd(is_persistent(TC)),
  R = true,
  out(is_persistent(TC,true)) )).

reaction(in(is_persistent(TC,R)),request,(
  rd(is_persistent(TC)),
  R = true,
  out(is_persistent(TC,true)) )).

reaction(rdp(is_persistent(TC,R)),(
  rd(is_persistent(TC)),
  R = true,
  out(is_persistent(TC,true)) )).

reaction(rd(is_persistent(TC,R)),request,(
  rd(is_persistent(TC)),
  R = true,
  out(is_persistent(TC,true)) )).
