reaction(out(boot),true,(
    in(boot),
    no(boot_info(_)),
    current_time(Time),
    out(boot_info([time(Time)])),
    out(rbac_installed(no)),
    out(context_id(0)),
    out(authorized_agent(_)),
    out(authorized_inspectors(yes)),
    out(policy(admin_policy,[])),
    out(role_policy(admin_role,admin_policy)),
    out(role_assignment(_,_)))).

reaction(inp(install_rbac),request,
(
	in(rbac_installed(R)),
	out(rbac_installed(yes)),
	out(install_rbac)
)).

%
% context acquire
%
%reaction( inp(context_request(AgentId,_)),request,(
%  no(authorized_agent(AgentId)),
%  out(context_request(AgentId,failed(agent_not_authorised))))).

%reaction( inp(context_request(AgentId,_)),request(
%  rd(open_session(_,AgentId)),
%  no(context_request(AgentId,ok(_))),
%  out(context_request(AgentId,failed(agent_already_present))) )).

%reaction( inp(context_request(AgentId,_)),request,(
%  rd(authorized_agent(AgentId)),
%  in(context_id(Id)),
%  Id1 is Id + 1,
%  out(context_id(Id1)),
%  no(open_session(_,AgentId,_)),
%  out(open_session(Id,AgentId,[])),
%  out(context_request(AgentId,ok(Id))) )).

reaction( inp(context_request(AgentId,_, AccUUID)),request,(
  no(authorized_agent(AgentId)),
  out(context_request(AgentId,failed(agent_not_authorized), AccUUID)))).

reaction( inp(context_request(AgentId,_, AccUUID)),request,(
  rd(open_session(Id,AgentId,AccUUID,_)),
  no(context_request(AgentId,ok(_),AccUUID)),
  out(context_request(AgentId,ok(Id),AccUUID)))).

reaction( inp(context_request(AgentId,_,AccUUID)),request,(
  rd(authorized_agent(AgentId)),
  in(context_id(Id)),
  Id1 is Id + 1,
  out(context_id(Id1)),
  no(open_session(_,AgentId,AccUUID,_)),
  out(open_session(Id,AgentId,AccUUID,[])),
  out(context_request(AgentId,ok(Id),AccUUID)) )).


%
% context release
%
reaction( inp(context_shutdown(CtxId,AgentId,_)),request,(
  rd(open_session(CtxId,AgentId,_)),
  out(context_shutdown(CtxId,AgentId,ok)) )).

reaction( inp(context_shutdown(CtxId,AgentId,ok)),response,(
  in(open_session(CtxId,AgentId,_)) )).

reaction( inp(context_shutdown(CtxId,AgentId,_)),request,(
  no(open_session(CtxId,AgentId,_)),
  out(context_shutdown(CtxId,AgentId,failed(no_valid_context))) )).

%
% role activation
%
reaction( inp(role_activation_request(CtxId,RoleId,Result)),request,(
  in(open_session(CtxId,AgentId,RoleList)),
  rd(role(RoleId,Descr)),
  rd(role_assignment(RoleId,AgentId)),
  out(open_session(CtxId,AgentId,[RoleId|RoleList])),
  rd(role_policy(RoleId,PolicyId)),
  rd(policy(PolicyId,Policy)),
  out( role_activation_request(CtxId,RoleId,ok(Policy))))).
  
reaction( inp(role_activation_request(AgentId,AccUUID,RoleId,Credentials,_)),request,(
  in(open_session(CtxId,AgentId,AccUUID,RoleList)),
  rd(role(RoleId,Descr,_)),										% Esiste il ruolo
  %rd(role_credentials(RoleId,Credentials)),						% Le credenziali sono verificate
  rd(role_assignment(RoleId,AgentId)),
  out(open_session(CtxId,AgentId,AccUUID,[RoleId|RoleList])),
  rd(role_policy(RoleId,PolicyId)),
  rd(policy(PolicyId,PermissionList)),
  out( role_activation_request(AgentId,AccUUID,RoleId,Credentials,ok(PolicyId, PermissionList))))).
  
%
% Policy list
%
reaction( inp(policy_list_request(AgentId,_)),(invocation, operation), (
	%in(open_session(CtxId,AgentId,RoleList)),
	rd_all(policy(PolicyId, PermissionList), AllPolicyList),
	out(policy_list_request(AgentId,ok(AllPolicyList)))
	)).
		
reaction( inp(policy_role_request(PolicyId,_)), (invocation, operation), (
	rd(role_policy(RoleId, PolicyId)),
	out(policy_role_request(PolicyId,RoleId))
	)).
	
reaction( inp(role_policy_request(_,RoleId)), (invocation, operation), (
	rd(role_policy(RoleId, PolicyId)),
	out(role_policy_request(PolicyId,RoleId))
	)).
	
%
%	Inspectors authorized?
%
reaction( inp(are_inspectors_auth(_)), request,(
 	rd(authorized_inspectors(A)),
 	out(are_inspectors_auth(A))
)).
 
reaction( inp(authorize_inspectors(A)), (invocation, operation),(
 	in(authorized_inspectors(_)),
 	out(authorized_inspectors(A)),
 	out(authorize_inspectors(A))
)).
 
%
%	List of all roles
%	
reaction( inp(role_list_request(_)),(invocation, operation),
(
	rd(list_all_roles(no)),
	out(role_list_request(failed(list_not_permitted)))
)).

reaction( inp(role_list_request(_)),(invocation, operation),
(
	rd(list_all_roles(yes)),
	rd_all(role(RoleId,Desc,Credentials), AllRoleList),
	out(role_list_request(ok(AllRoleList)))
)).
	
%reaction( out(create_role_list([role(RoleId,Desc)|AllRoleList], AgentId, ResultList)),
%	internal,
%	(
%		in(create_role_list(_, AgentId, ResultList)), % tolgo la tupla scatenante la reazione 
		
	
reaction( out(create_role_list([],AgentId, ResultList)), % ho iterato tutta la lista
	internal,
(
	in(create_role_list(_,AgentId,ResultList)), % tolgo la tupla scatenante la reazione    
	out(role_activable_list_request(AgentId,ok(role_activable_list_request),ResultList))
)).
	
%
% command management
%

reaction(in(cmd(X)),response,(
  out(cmd_pending(X)))).

reaction(in(cmd_result(X,_)),request,(
  no(cmd_result(X,_)),
  no(cmd_pending(X)),
  out(cmd_result(X,unknown)))).

reaction(in(cmd_result(X,R)),request,(
  rd(cmd_pending(X)),
  out(cmd_result(X,pending)))).

reaction(out(cmd_result(X,R)),(
  no(cmd_pending(X)),
  in(cmd_result(X,R)))).

reaction(out(cmd_result(X,R)),(
  in(cmd_pending(X)) )).

%
% for persistency management
%
reaction(rdp(is_persistent(TC,R)),(
  no(is_persistent(TC)),
  out(is_persistent(TC,false)))).

reaction(rd(is_persistent(TC,R)),request,(
  no(is_persistent(TC)),
  out(is_persistent(TC,false)))).

reaction(inp(in_persistent(TC,R)),(
  no(is_persistent(TC)),
  out(is_persistent(TC,false)))).

reaction(in(is_persistent(TC,R)),request,(
  no(is_persistent(TC)),
  out(is_persistent(TC,false)))).

%

reaction(inp(is_persistent(TC,R)),request,(
  rd(is_persistent(TC)),
  R = true,
  out(is_persistent(TC,true)) )).

reaction(in(is_persistent(TC,R)),request,(
  rd(is_persistent(TC)),
  R = true,
  out(is_persistent(TC,true)) )).

reaction(rdp(is_persistent(TC,R)),(
  rd(is_persistent(TC)),
  R = true,
  out(is_persistent(TC,true)) )).

reaction(rd(is_persistent(TC,R)),request,(
  rd(is_persistent(TC)),
  R = true,
  out(is_persistent(TC,true)) )).
